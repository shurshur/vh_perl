use 5.008;
use ExtUtils::MakeMaker;
use ExtUtils::Embed;

# See lib/ExtUtils/MakeMaker.pm for details of how to influence
# the contents of the Makefile that is written.
WriteMakefile(
    'FIRST_MAKEFILE'	=> 'Makefile.build',
    'NAME'		=> 'vh',
    'VERSION_FROM'	=> 'vh.pm',
    'PREREQ_PM'		=> {},
    ($] >= 5.005 ?    ## Add these new keywords supported since 5.005
      (ABSTRACT_FROM => 'vh.pm', # retrieve abstract from module
       AUTHOR     => 'Daniel Muller <dan at verliba dot cz>') : ()),
    'LIBS'		=> [''],
    'DEFINE'		=> '',
    'INC'		=> '-I. -I@VERLIHUB_SOURCE_DIR@ @VERLIHUB_INCLUDE_DIRS@',
    'OBJECT'		=> '$(O_FILES) -L@VERLIHUB_SOURCE_DIR@/src -lvhapi @VERLIHUB_SCRIPTS_LIBS@ '.&ldopts,
    'CC'                => 'g++ -xc++',
    'LD'                => 'g++'
);
exit;
if  (eval {require ExtUtils::Constant; 1}) {
  # If you edit these definitions to change the constants used by this module,
  # you will need to use the generated const-c.inc and const-xs.inc
  # files to replace their "fallback" counterparts before distributing your
  # changes.
  my @names = (qw());
  ExtUtils::Constant::WriteConstants(
                                     NAME         => 'vh',
                                     NAMES        => \@names,
                                     DEFAULT_TYPE => 'IV',
                                     C_FILE       => 'const-c.inc',
                                     XS_FILE      => 'const-xs.inc',
                                  );

}
else {
  use File::Copy;
  use File::Spec;
  foreach my $file ('const-c.inc', 'const-xs.inc') {
    my $fallback = File::Spec->catfile('fallback', $file);
    copy ($fallback, $file) or die "Can't copy $fallback to $file: $!";
  }
}
